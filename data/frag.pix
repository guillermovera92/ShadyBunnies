#version 330

// Fragment shader


// These get passed in from the vertex shader and are interpolated (varying) properties,
// so they change for each pixel across the triangle:
in vec4 interpSurfPosition;
in vec3 interpSurfNormal;


uniform sampler2D textureSamplerDiffuse; // This contains the sampler to use for shading
uniform sampler2D textureSamplerSpecular; // This contains the sampler to use for shading


// This is an out variable for the final color we want to render this fragment.
out vec4 fragColor;

//uniform variable for the light position
uniform vec4 lightPosition; // in world coordinates

// Passing in uniform variables

// Light Properties
uniform vec3 ambientLightIntensity;
uniform vec3 diffuseLightIntensity;
uniform vec3 specularLightIntensity;

// Material Properties
uniform float specularExponent;
uniform vec3 ambientReflectionCoeff;
uniform vec3 diffuseReflectionCoeff;
uniform vec3 specularReflectionCoeff;

uniform vec3 eyePosWorld;

vec3 halfway;
vec3 specular;
vec3 materialColor;


void main() {
    
    // Defining all the required vectors
    vec3 lightVector = normalize(lightPosition.xyz - interpSurfPosition.xyz);
    vec3 eyeVector = normalize(eyePosWorld - interpSurfPosition.xyz);
    vec3 halfway = normalize(eyeVector + lightVector);
    vec3 normal = normalize(interpSurfNormal);

    // Start with black and then add lighting to the final color as we calculate it
	vec3 finalColor = vec3(0.0, 0.0, 0.0);

	// Calculating ambient, diffuse, and specular lighting for this pixel based on its position, normal, etc.
    
    vec3 ambient = ambientReflectionCoeff * ambientLightIntensity;

    // Diffuse component
    float x_coordinate = clamp(dot(normal, lightVector), 0.0, 1.0);
    // For Toon Shading
    vec3 diffuse = diffuseReflectionCoeff * diffuseLightIntensity * texture(textureSamplerDiffuse, vec2(x_coordinate, 0.0)).xyz;

    // For photorealistic shading, comment out line above and uncomment line below
//    vec3 diffuse = diffuseReflectionCoeff * diffuseLightIntensity * texture(textureSamplerSpecular, vec2(x_coordinate, 0.0)).xyz;
    
    // Calculating specular component using halfway vector and looking it up from the texture sampler
    x_coordinate = pow(clamp(dot(halfway, normal), 0.0, 1.0), specularExponent);
    vec3 specular = specularReflectionCoeff * specularLightIntensity * texture(textureSamplerSpecular, vec2(x_coordinate, 0)).xyz;
    
    vec3 materialColor = ambient + diffuse + specular;

    fragColor.rgb = materialColor + finalColor.rgb; // Guillermo, can you confirm if it should just be materialColor or materialColor+finalColor?

}
